'''使用分水岭算法基于掩模的图像分割'''import cv2import numpy as npfrom matplotlib import pyplot as plt'''原理任何一副灰度图像都可以被看成拓扑平面，灰度值高的区域可以被看成是山峰，灰度值低的区域可以被看成是山谷。我们向每一个山谷中灌不同颜色的水。随着水的位的升高，不同山谷的水就会相遇汇合，为了防止不同山谷的水汇合，我们需要在水汇合的地方构建起堤坝。不停的灌水，不停的构建堤坝知道所有的山峰都被水淹没。我们构建好的堤坝就是对图像的分割。这就是分水岭算法的背后哲理。OpenCV 采用了基于掩模的分水岭算法，在这种算法中我们要设置哪些山谷点会汇合，哪些不会。这是一种交互式的图像分割。我们要做的就是给我们已知的对象打上不同的标签。如果某个区域肯定是前景或对象，就使用某个颜色（或灰度值）标签标记它。如果某个区域肯定不是对象而是背景就使用另外一个颜色标签标记。而剩下的不能确定是前景还是背景的区域就用 0 标记。这就是我们的标签。然后实施分水岭算法。每一次灌水，我们的标签就会被更新，当两个不同颜色的标签相遇时就构建堤坝，直到将所有山峰淹没，最后我们得到的边界对象（堤坝）的值为 -1。'''image = cv2.imread("../data/coin.png")gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)# 1. 近似估计。使用 Otsu's 二值化，自动选择阈值，针对直方图双峰有效，单峰的不太好ret, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)# 2. 去除图像中的所有的白噪声kernel = np.ones((3, 3), np.uint8)# 先进性腐蚀再进行膨胀就叫做开运算。opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations = 2)# 3. 确定的背景sure_bg = cv2.dilate(opening, kernel, iterations=3)# 4。 确定前景# 距离变换：计算非零像素点到零像素点的最短距离# 最常见通过连续的腐蚀操作来实现，腐蚀操作的停止条件是所有前景像素都被完全腐蚀。# 这样根据腐蚀的先后顺序，我们就得到各个前景像素点到前景中心骨架像素点的距离。根据各个像素点的距离值，设置为不同的灰度值。# 这样就完成了二值图像的距离变换# 第二个参数 0,1,2 分别表示 CV_DIST_L1, CV_DIST_L2 , CV_DIST_Cdist_transform = cv2.distanceTransform(opening, 1, 5)ret, sure_fg = cv2.threshold(dist_transform, 0.7 * dist_transform.max(), 255, 0)# 5. 未知区域。这就是分水岭算法要做的。# 这些区域通常是前景与背景的交界处（或者两个前景的交界）。我们称之为边界。从肯定是背景的区域中减去肯定是前景的区域就得到了边界区域。sure_fg = np.uint8(sure_fg)unknown = cv2.subtract(sure_bg, sure_fg)# 6. 不同标签标记ret, markers = cv2.connectedComponents(sure_fg)# +1 背景是1 不是0maskers = markers + 1# 标记未知区域为0markers[unknown == 255] = 0# 7. 实施分水岭算法, 边界区域为 -1markers = cv2.watershed(image, markers)image[markers == -1] = [255, 0, 0]plt.figure(1, figsize=(10, 6))plt.subplot(231), plt.imshow(gray)plt.subplot(232), plt.imshow(opening)plt.subplot(233), plt.imshow(sure_bg)plt.subplot(234), plt.imshow(sure_fg)plt.subplot(235), plt.imshow(unknown)plt.subplot(236), plt.imshow(image)plt.show()plt.close()