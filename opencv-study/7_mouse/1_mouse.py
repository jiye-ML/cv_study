'''学习使用 OpenCV 处理鼠标事件'''import cv2import numpy as np# 在图片上你双击过的位置绘制一个圆圈。def mouse_double_clip_event():    # 回调函数，    def draw_circle(event, x, y, flags, param):        if event == cv2.EVENT_LBUTTONDBLCLK:            cv2.circle(img, (x, y), 100, (255, 0, 0), -1)        pass    img = np.zeros((512, 512, 3), np.uint8)    cv2.namedWindow('image')    cv2.setMouseCallback('image', draw_circle)    while 1:        cv2.imshow('image', img)        if cv2.waitKey(20) & 0xFF == 27:            break            pass        pass    cv2.destroyAllWindows()    pass# 鼠标事件的交互def mouse_each_other():    '''    这是一个典型的例子他可以帮助我们更好理解与构建人机交互式程序，比如物体跟踪，图像分割等。    '''    # 鼠标按下时变为 True    drawing = False    # 如果 mode 为 True， 绘制矩形，按下'm'绘制曲线    mode = True    ix, iy = -1, -1    # 回调函数，    def draw_circle(event, x, y, flags, param):        if event == cv2.EVENT_LBUTTONDOWN:  # 按下鼠标左键，返回位置            global drawing, ix, iy            drawing = True            ix, iy = x, y        elif event == cv2.EVENT_MOUSEMOVE and flags == cv2.EVENT_FLAG_LBUTTON:  # 当鼠标左键按下移动绘制图形，event查看移动，flag查看是否按下            if drawing == True:                if mode == True:                    cv2.rectangle(img, (ix, iy), (x, y), (0, 255, 0), -1)                else:                    # 绘制圆，                    cv2.circle(img, (x, y), 3, (0, 0, 255), -1)        elif event == cv2.EVENT_LBUTTONUP: # 鼠标松开停止绘制            drawing = False        pass    # 图片    img = np.zeros((512, 512, 3), np.uint8)    # 窗口    cv2.namedWindow('image')    # 回调函数    cv2.setMouseCallback('image', draw_circle)    while 1:        cv2.imshow('image', img)        k = cv2.waitKey(1) & 0xFF        if k == ord('m'):            mode = not mode        elif k == 27:            break    passif __name__ == '__main__':    mouse_each_other()    pass